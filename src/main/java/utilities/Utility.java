package utilities;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.testng.TestNG;

public class Utility {

	static Constants cons = new Constants();
	
	 public static void sendMail() throws AddressException, MessagingException, IOException{
	   
		// attachments
        String[] attachFiles = new String[3];
        attachFiles[0] = cons.getTemplatePath();
        attachFiles[1] = cons.getAutoGeneratedScriptPath();
        attachFiles[2] = cons.getScreenshotPath();
        Properties properties = new Properties();
        properties.put("mail.smtp.host", Constants.host);
        properties.put("mail.smtp.port", Constants.port);
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.user", Constants.mailFrom);
        properties.put("mail.password", Constants.password);
         
         // creates a new session with an authenticator
         Authenticator auth = new Authenticator() {
             public PasswordAuthentication getPasswordAuthentication() {
                 return new PasswordAuthentication(Constants.mailFrom, Constants.password);
             }
         };
         Session session = Session.getInstance(properties, auth);
  
         // creates a new e-mail message
         Message msg = new MimeMessage(session);
  
         msg.setFrom(new InternetAddress(Constants.mailFrom));
         InternetAddress[] toAddresses = { new InternetAddress(Constants.mailTo) };
         msg.setRecipients(Message.RecipientType.TO, toAddresses);
         msg.setSubject(Constants.subject);
         msg.setSentDate(new Date());
  
         // creates message part
         MimeBodyPart messageBodyPart = new MimeBodyPart();
         messageBodyPart.setContent(Constants.message, "text/html");
  
         // creates multi-part
         Multipart multipart = new MimeMultipart();
         multipart.addBodyPart(messageBodyPart);
         
         // adds attachments
         if (attachFiles != null && attachFiles.length > 0) {
             for (String filePath : attachFiles) {
                 MimeBodyPart attachPart = new MimeBodyPart();
  
                 try {
                     attachPart.attachFile(filePath);
                 } catch (IOException ex) {
                     ex.printStackTrace();
                 }
  
                 multipart.addBodyPart(attachPart);
             }
         }
         
         msg.setContent(multipart);
         
         // sends the e-mail
         Transport.send(msg);
         
         System.out.println("Email have successfully sent to "+Constants.mailTo);
    }
	 
	 public static String readPropertyFile() throws IOException{
	    	String currentDate = "";
	    	Properties prop = new Properties();
	    	InputStream input = new FileInputStream(cons.getCurrentDatePath());
	    	
	    	// load a properties file
	    	prop.load(input);
	    	currentDate = prop.getProperty("currentDate");
	    	
	    	return currentDate;
	    	
	 }
	 
	 public static void writePropertyFile(String currentDate) throws IOException{
	    	Properties prop = new Properties();
	    	OutputStream output = new FileOutputStream(cons.getCurrentDatePath());
	    	prop.setProperty("currentDate", currentDate);
	    	
	    	// save properties to project root folder
	    	prop.store(output, null);
	 }
	 
	 public static ArrayList templateFileWriter() throws IOException{
	    	
	    	ArrayList templateData = new ArrayList();
	    	FileInputStream fis = new FileInputStream(cons.getCustomLogPath());
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			String strLine;
			while((strLine=br.readLine())!=null){
				templateData.add(strLine);
				System.out.println();
			}
			return templateData;
	 }
	 
	 public static void customLogWriter() throws IOException{
	    	
	    	String logValue="";
	    	getCurrentDate();
	    	FileInputStream fis = new FileInputStream(cons.getCoreLogPath());
			PrintWriter writer = new PrintWriter(cons.getCustomLogPath(), "UTF-8");
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			String strLine;
			while((strLine=br.readLine())!=null){
				if(strLine.contains(Constants.coreLogValidationFlag)){
				logValue = strLine.split(Constants.coreLogValidationFlag)[1].trim();
				writer.println(logValue);
				}
			}
			writer.close();
	 }
	 
	 
	 public static void createExcelFile() throws IOException, InterruptedException{
	    	
	    	ArrayList templateResult = new ArrayList();
	    	String filename = cons.getTemplatePath();
	        
	        HSSFWorkbook workbook = new HSSFWorkbook();
	        HSSFSheet sheet = workbook.createSheet("TestCase"); 
	        
	        HSSFRow rowhead = sheet.createRow((short)0);
	        rowhead.createCell(0).setCellValue("PropertyName");
	        rowhead.createCell(1).setCellValue("Action");
	        rowhead.createCell(2).setCellValue("TestData");

	        templateResult = templateFileWriter();
	        
	        for(int i=0;i<templateResult.size();i++){
	        	
	        	String value = (String) templateResult.get(i);
	        	String templateData[] = value.split("_");
	        	HSSFRow row = sheet.createRow((short)i+1);
	        	row.createCell(0).setCellValue(templateData[1].trim());
	        	row.createCell(1).setCellValue(templateData[0].trim());
	        	row.createCell(2).setCellValue(templateData[2].trim());
	        	
	        }
	        
	        FileOutputStream fileOut = new FileOutputStream(filename);
	        workbook.write(fileOut);
	        fileOut.close();
	        System.out.println("Template file has been generated!");
	        Thread.sleep(5000);
	    	
	 }
	 
	 public static String getCurrentDate() throws IOException{
	    	DateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
	    	Date date = new Date();
	    	String currentDate = sdf.format(date);
	    	writePropertyFile(currentDate);
	    	return currentDate;
	 }
	 
	 public static void exceuteTest() throws IOException{
	    	TestNG runner = new TestNG();
			List<String> suitefiles = new ArrayList<String>();
			suitefiles.add(cons.getTestNGXMLPath());
			runner.setTestSuites(suitefiles);
			runner.run();
	 }
}
